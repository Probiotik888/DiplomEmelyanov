import os
import glob
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from flask_sqlalchemy import SQLAlchemy
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer
import nltk
from nltk.corpus import stopwords
import string

matplotlib.use('Agg')  # –û—Ç–∫–ª—é—á–∏—Ç—å GUI –¥–ª—è matplotlib

nltk.download('stopwords')
russian_stopwords = set(stopwords.words("russian"))


def preprocess_text(text):
    text = text.lower()
    text = ''.join([char for char in text if char not in string.punctuation])
    words = text.split()
    words = [word for word in words if word not in russian_stopwords]
    return ' '.join(words)


def create_semantic_graphs(df):
    graphs_path = 'static/graphs'

    all_reviews = ' '.join(df['–û—Ç–∑—ã–≤'].dropna().astype(str))
    processed_text = preprocess_text(all_reviews)

    # üå• –û–±–ª–∞–∫–æ —Å–ª–æ–≤
    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(processed_text)
    cloud_path = os.path.join(graphs_path, 'wordcloud.png')
    wordcloud.to_file(cloud_path)
    print(f"–û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {cloud_path}")

    # üìä –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    vectorizer = CountVectorizer(ngram_range=(2, 3), max_features=20)
    X = vectorizer.fit_transform([processed_text])
    phrases = vectorizer.get_feature_names_out()
    counts = X.toarray().sum(axis=0)

    phrase_df = pd.DataFrame({'–§—Ä–∞–∑–∞': phrases, '–ß–∞—Å—Ç–æ—Ç–∞': counts}).sort_values(by='–ß–∞—Å—Ç–æ—Ç–∞', ascending=False)

    plt.figure(figsize=(10, 6))
    plt.barh(phrase_df['–§—Ä–∞–∑–∞'], phrase_df['–ß–∞—Å—Ç–æ—Ç–∞'], color='skyblue')
    plt.title("–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã")
    plt.xlabel("–ß–∞—Å—Ç–æ—Ç–∞")
    plt.gca().invert_yaxis()
    plt.tight_layout()
    phrase_path = os.path.join(graphs_path, 'frequent_phrases.png')
    plt.savefig(phrase_path)
    plt.close()
    print(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {phrase_path}")


def create_graphs(db, Review):
    graphs_path = 'static/graphs'

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    if not os.path.exists(graphs_path):
        os.makedirs(graphs_path)
    else:
        old_files = glob.glob(os.path.join(graphs_path, '*'))
        for file in old_files:
            os.remove(file)

    # üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ SQLAlchemy
    reviews = Review.query.all()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
    df = pd.DataFrame([(r.product, r.review, r.sentiment) for r in reviews], columns=['–¢–æ–≤–∞—Ä', '–û—Ç–∑—ã–≤', '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'])

    # üìä –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    sentiment_counts = df['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'].value_counts()
    plt.figure(figsize=(6, 6))
    sentiment_counts.plot.pie(
        autopct='%1.1f%%',
        startangle=90,
        colors=['#66b3ff', '#ff9999', '#99ff99'],
        wedgeprops={'edgecolor': 'black'},
        textprops={'fontsize': 12}
    )
    plt.ylabel('')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –æ—Ç–∑—ã–≤–æ–≤', fontsize=16)
    plt.tight_layout()

    pie_path = os.path.join(graphs_path, 'sentiment_pie.png')
    plt.savefig(pie_path)
    plt.close()
    print(f"–ì—Ä–∞—Ñ–∏–∫ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {pie_path}")

    # üìä –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    negative_products = df[df['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] == '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π']['–¢–æ–≤–∞—Ä'].value_counts()
    if not negative_products.empty:
        plt.figure(figsize=(8, 6))
        negative_products.plot(kind='bar', color='#ff6666', edgecolor='black')
        plt.title('–¢–æ–≤–∞—Ä—ã —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏', fontsize=16)
        plt.xlabel('–¢–æ–≤–∞—Ä', fontsize=14)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤', fontsize=14)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        bar_path = os.path.join(graphs_path, 'negative_products.png')
        plt.savefig(bar_path)
        plt.close()
        print(f"–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {bar_path}")

        create_semantic_graphs(df)
